/*
 * This file is generated by jOOQ.
 */
package org.elf.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.elf.db.Elf;
import org.elf.db.Indexes;
import org.elf.db.Keys;
import org.elf.db.tables.records.ElfBaseUserRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用来维护用户信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElfBaseUser extends TableImpl<ElfBaseUserRecord> {

    private static final long serialVersionUID = 1562982631;

    /**
     * The reference instance of <code>elf.elf_base_user</code>
     */
    public static final ElfBaseUser ELF_BASE_USER = new ElfBaseUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElfBaseUserRecord> getRecordType() {
        return ElfBaseUserRecord.class;
    }

    /**
     * The column <code>elf.elf_base_user.id</code>. 唯一ID
     */
    public final TableField<ElfBaseUserRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "唯一ID");

    /**
     * The column <code>elf.elf_base_user.user_name</code>. 用户名称
     */
    public final TableField<ElfBaseUserRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "用户名称");

    /**
     * The column <code>elf.elf_base_user.login_name</code>. 登入名称
     */
    public final TableField<ElfBaseUserRecord, String> LOGIN_NAME = createField("login_name", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "登入名称");

    /**
     * The column <code>elf.elf_base_user.email</code>. 用户邮箱地址
     */
    public final TableField<ElfBaseUserRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "用户邮箱地址");

    /**
     * The column <code>elf.elf_base_user.language</code>. 用户所属语言
     */
    public final TableField<ElfBaseUserRecord, Long> LANGUAGE = createField("language", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户所属语言");

    /**
     * The column <code>elf.elf_base_user.role_id</code>. 用户所属的角色ID
     */
    public final TableField<ElfBaseUserRecord, Long> ROLE_ID = createField("role_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户所属的角色ID");

    /**
     * The column <code>elf.elf_base_user.create_date</code>. 用户创建日期
     */
    public final TableField<ElfBaseUserRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "用户创建日期");

    /**
     * The column <code>elf.elf_base_user.online</code>. 在线时长 单位分
     */
    public final TableField<ElfBaseUserRecord, Integer> ONLINE = createField("online", org.jooq.impl.SQLDataType.INTEGER, this, "在线时长 单位分");

    /**
     * The column <code>elf.elf_base_user.password</code>. 用户密码
     */
    public final TableField<ElfBaseUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(32), this, "用户密码");

    /**
     * Create a <code>elf.elf_base_user</code> table reference
     */
    public ElfBaseUser() {
        this(DSL.name("elf_base_user"), null);
    }

    /**
     * Create an aliased <code>elf.elf_base_user</code> table reference
     */
    public ElfBaseUser(String alias) {
        this(DSL.name(alias), ELF_BASE_USER);
    }

    /**
     * Create an aliased <code>elf.elf_base_user</code> table reference
     */
    public ElfBaseUser(Name alias) {
        this(alias, ELF_BASE_USER);
    }

    private ElfBaseUser(Name alias, Table<ElfBaseUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private ElfBaseUser(Name alias, Table<ElfBaseUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用来维护用户信息"));
    }

    public <O extends Record> ElfBaseUser(Table<O> child, ForeignKey<O, ElfBaseUserRecord> key) {
        super(child, key, ELF_BASE_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Elf.ELF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ELF_BASE_USER_LOGIN_NAME_UNIQUE, Indexes.ELF_BASE_USER_PRIMARY, Indexes.ELF_BASE_USER_USER_TO_ROLE_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ElfBaseUserRecord> getPrimaryKey() {
        return Keys.KEY_ELF_BASE_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ElfBaseUserRecord>> getKeys() {
        return Arrays.<UniqueKey<ElfBaseUserRecord>>asList(Keys.KEY_ELF_BASE_USER_PRIMARY, Keys.KEY_ELF_BASE_USER_LOGIN_NAME_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ElfBaseUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ElfBaseUserRecord, ?>>asList(Keys.USER_TO_ROLE);
    }

    public ElfBaseRole elfBaseRole() {
        return new ElfBaseRole(this, Keys.USER_TO_ROLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ElfBaseUser as(String alias) {
        return new ElfBaseUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ElfBaseUser as(Name alias) {
        return new ElfBaseUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElfBaseUser rename(String name) {
        return new ElfBaseUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElfBaseUser rename(Name name) {
        return new ElfBaseUser(name, null);
    }
}
